
#mp.messaging.incoming.songs.bootstrap.servers=kafka:9092
%prod.mp.messaging.incoming.songs.bootstrap.servers=my-cluster-kafka-bootstrap:9092
#%dev.mp.messaging.incoming.songs.bootstrap.servers=localhost:55001
mp.messaging.incoming.songs.topic=songs
mp.messaging.incoming.songs.auto.offset.reset=earliest
mp.messaging.incoming.songs.connector=smallrye-kafka
mp.messaging.incoming.songs.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.songs.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

mp.messaging.incoming.songs.group.id=songs
# mp.messaging.incoming.songs.topic=songs

# quarkus.container-image.group=rhdevelopers
# quarkus.container-image.name=kafka-tutorial-song-indexer-app
# quarkus.container-image.tag=quarkus
# quarkus.container-image.registry=quay.io

# quarkus.kubernetes.service-type=load-balancer
quarkus.micrometer.binder.kafka.enabled=true
quarkus.http.port=8080
quarkus.application.name=song-indexer-app 

quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317 
#quarkus.otel.exporter.otlp.traces.headers=authorization=Bearer my_secret 
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n